{
    "abi": [
        {
            "type": "function",
            "name": "fill",
            "inputs": [
                {
                    "name": "outputs",
                    "type": "tuple[]",
                    "internalType": "struct Output[]",
                    "components": [
                        {
                            "name": "token",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "amount",
                            "type": "uint256",
                            "internalType": "uint256"
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "chainId",
                            "type": "uint32",
                            "internalType": "uint32"
                        }
                    ]
                }
            ],
            "outputs": [],
            "stateMutability": "payable"
        },
        {
            "type": "event",
            "name": "Filled",
            "inputs": [
                {
                    "name": "outputs",
                    "type": "tuple[]",
                    "indexed": false,
                    "internalType": "struct Output[]",
                    "components": [
                        {
                            "name": "token",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "amount",
                            "type": "uint256",
                            "internalType": "uint256"
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "chainId",
                            "type": "uint32",
                            "internalType": "uint32"
                        }
                    ]
                }
            ],
            "anonymous": false
        }
    ],
    "bytecode": {
        "object": "0x",
        "sourceMap": "",
        "linkReferences": {}
    },
    "deployedBytecode": {
        "object": "0x",
        "sourceMap": "",
        "linkReferences": {}
    },
    "methodIdentifiers": {
        "fill((address,uint256,address,uint32)[])": "897bc0d6"
    },
    "rawMetadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct Output[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"name\":\"Filled\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"}],\"internalType\":\"struct Output[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"name\":\"fill\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Filled((address,uint256,address,uint32)[])\":{\"details\":\"NOTE that here, Output.chainId denotes the *origin* chainId.\"}},\"kind\":\"dev\",\"methods\":{\"fill((address,uint256,address,uint32)[])\":{\"custom:emits\":\"Filled\",\"details\":\"NOTE that here, Output.chainId denotes the *origin* chainId.\",\"params\":{\"outputs\":\"- The Outputs to be transferred.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Filled((address,uint256,address,uint32)[])\":{\"notice\":\"Emitted when Order Outputs are sent to their recipients.\"}},\"kind\":\"user\",\"methods\":{\"fill((address,uint256,address,uint32)[])\":{\"notice\":\"Send the Output(s) of any number of Orders.         The user calls `initiate` on a rollup; the Builder calls `fill` on the target chain aggregating Outputs.         Builder may aggregate multiple Outputs with the same (`chainId`, `recipient`, `token`) into a single Output with the summed `amount`.\"}},\"notice\":\"Contract capable of processing fulfillment of intent-based Orders.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Orders.sol\":\"OrderDestination\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009\",\"dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN\"]},\"src/Orders.sol\":{\"keccak256\":\"0xb7f6cffcd2516d53e86cda1062c91ff8e0916468b02a209c5f36f6da1c2447c8\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://9051a83c7dcc6e84ad356855c4f0b49dc8bc23a2667e3e3399b1c55fab32e180\",\"dweb:/ipfs/QmdifUwAqUPauSrNEq4SMSZXgL4SLYYeixiXjGC5qXD9Fi\"]}},\"version\":1}",
    "metadata": {
        "compiler": {
            "version": "0.8.26+commit.8a97fa7a"
        },
        "language": "Solidity",
        "output": {
            "abi": [
                {
                    "inputs": [
                        {
                            "internalType": "struct Output[]",
                            "name": "outputs",
                            "type": "tuple[]",
                            "components": [
                                {
                                    "internalType": "address",
                                    "name": "token",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amount",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "address",
                                    "name": "recipient",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint32",
                                    "name": "chainId",
                                    "type": "uint32"
                                }
                            ],
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "Filled",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "struct Output[]",
                            "name": "outputs",
                            "type": "tuple[]",
                            "components": [
                                {
                                    "internalType": "address",
                                    "name": "token",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amount",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "address",
                                    "name": "recipient",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint32",
                                    "name": "chainId",
                                    "type": "uint32"
                                }
                            ]
                        }
                    ],
                    "stateMutability": "payable",
                    "type": "function",
                    "name": "fill"
                }
            ],
            "devdoc": {
                "kind": "dev",
                "methods": {
                    "fill((address,uint256,address,uint32)[])": {
                        "custom:emits": "Filled",
                        "details": "NOTE that here, Output.chainId denotes the *origin* chainId.",
                        "params": {
                            "outputs": "- The Outputs to be transferred."
                        }
                    }
                },
                "version": 1
            },
            "userdoc": {
                "kind": "user",
                "methods": {
                    "fill((address,uint256,address,uint32)[])": {
                        "notice": "Send the Output(s) of any number of Orders.         The user calls `initiate` on a rollup; the Builder calls `fill` on the target chain aggregating Outputs.         Builder may aggregate multiple Outputs with the same (`chainId`, `recipient`, `token`) into a single Output with the summed `amount`."
                    }
                },
                "version": 1
            }
        },
        "settings": {
            "remappings": [
                "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
                "ds-test/=lib/forge-std/lib/ds-test/src/",
                "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
                "forge-std/=lib/forge-std/src/",
                "openzeppelin-contracts/=lib/openzeppelin-contracts/"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200
            },
            "metadata": {
                "bytecodeHash": "ipfs"
            },
            "compilationTarget": {
                "src/Orders.sol": "OrderDestination"
            },
            "evmVersion": "cancun",
            "libraries": {}
        },
        "sources": {
            "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
                "keccak256": "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
                "urls": [
                    "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
                    "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
                ],
                "license": "MIT"
            },
            "src/Orders.sol": {
                "keccak256": "0xb7f6cffcd2516d53e86cda1062c91ff8e0916468b02a209c5f36f6da1c2447c8",
                "urls": [
                    "bzz-raw://9051a83c7dcc6e84ad356855c4f0b49dc8bc23a2667e3e3399b1c55fab32e180",
                    "dweb:/ipfs/QmdifUwAqUPauSrNEq4SMSZXgL4SLYYeixiXjGC5qXD9Fi"
                ],
                "license": "UNLICENSED"
            }
        },
        "version": 1
    },
    "id": 27
}