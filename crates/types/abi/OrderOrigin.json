{"abi":[{"type":"function","name":"initiate","inputs":[{"name":"deadline","type":"uint256","internalType":"uint256"},{"name":"inputs","type":"tuple[]","internalType":"struct Input[]","components":[{"name":"token","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}]},{"name":"outputs","type":"tuple[]","internalType":"struct Output[]","components":[{"name":"token","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"recipient","type":"address","internalType":"address"},{"name":"chainId","type":"uint32","internalType":"uint32"}]}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"sweep","inputs":[{"name":"recipient","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"Order","inputs":[{"name":"deadline","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"inputs","type":"tuple[]","indexed":false,"internalType":"struct Input[]","components":[{"name":"token","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}]},{"name":"outputs","type":"tuple[]","indexed":false,"internalType":"struct Output[]","components":[{"name":"token","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"recipient","type":"address","internalType":"address"},{"name":"chainId","type":"uint32","internalType":"uint32"}]}],"anonymous":false},{"type":"event","name":"Sweep","inputs":[{"name":"recipient","type":"address","indexed":true,"internalType":"address"},{"name":"token","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"OnlyBuilder","inputs":[]},{"type":"error","name":"OrderExpired","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"initiate(uint256,(address,uint256)[],(address,uint256,address,uint32)[])":"f9c50441","sweep(address,address)":"b8dc491b"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlyBuilder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Input[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct Output[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sweep\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Input[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"}],\"internalType\":\"struct Output[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"name\":\"initiate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Order(uint256,(address,uint256)[],(address,uint256,address,uint32)[])\":{\"details\":\"NOTE that here, Output.chainId denotes the *destination* chainId.\"},\"Sweep(address,address,uint256)\":{\"details\":\"Intended to improve visibility for Builders to ensure Sweep isn't called unexpectedly.      Intentionally does not bother to emit which token(s) were swept, nor their amounts.\"}},\"kind\":\"dev\",\"methods\":{\"initiate(uint256,(address,uint256)[],(address,uint256,address,uint32)[])\":{\"custom:emits\":\"Order if the transaction mines.\",\"custom:reverts\":\"OrderExpired if the deadline has passed.\",\"details\":\"inputs are provided on the rollup; in exchange,      outputs are expected to be received on the target chain(s).Fees paid to the Builders for fulfilling the Orders      can be included within the \\\"exchange rate\\\" between inputs and outputs.The Builder claims the inputs from the contract by submitting `sweep` transactions within the same block.The Rollup STF MUST NOT apply `initiate` transactions to the rollup state      UNLESS the outputs are delivered on the target chains within the same block.\",\"params\":{\"deadline\":\"- The deadline at or before which the Order must be fulfilled.\",\"inputs\":\"- The token amounts offered by the swapper in exchange for the outputs.\",\"outputs\":\"- The token amounts that must be received on their target chain(s) in order for the Order to be executed.\"}},\"sweep(address,address)\":{\"custom:emits\":\"Sweep\",\"custom:reverts\":\"OnlyBuilder if called by non-block builder\",\"details\":\"Called by the Builder within the same block as users' `initiate` transactions      to claim the `inputs`.Builder MUST call `sweep` atomically with `fill` (claim Inputs atomically with sending Outputs).\",\"params\":{\"recipient\":\"- The address to receive the tokens.\",\"token\":\"- The token to transfer.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"OnlyBuilder()\":[{\"notice\":\"Thrown when trying to call `sweep` if not the Builder of the block.\"}],\"OrderExpired()\":[{\"notice\":\"Thrown when an Order is submitted with a deadline that has passed.\"}]},\"events\":{\"Order(uint256,(address,uint256)[],(address,uint256,address,uint32)[])\":{\"notice\":\"Emitted when an Order is submitted for fulfillment.\"},\"Sweep(address,address,uint256)\":{\"notice\":\"Emitted when tokens or native Ether is swept from the contract.\"}},\"kind\":\"user\",\"methods\":{\"initiate(uint256,(address,uint256)[],(address,uint256,address,uint32)[])\":{\"notice\":\"Request to swap ERC20s.\"},\"sweep(address,address)\":{\"notice\":\"Transfer the entire balance of ERC20 tokens to the recipient.\"}},\"notice\":\"Contract capable of registering initiation of intent-based Orders.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Orders.sol\":\"OrderOrigin\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009\",\"dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN\"]},\"src/Orders.sol\":{\"keccak256\":\"0xb7f6cffcd2516d53e86cda1062c91ff8e0916468b02a209c5f36f6da1c2447c8\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://9051a83c7dcc6e84ad356855c4f0b49dc8bc23a2667e3e3399b1c55fab32e180\",\"dweb:/ipfs/QmdifUwAqUPauSrNEq4SMSZXgL4SLYYeixiXjGC5qXD9Fi\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"OnlyBuilder"},{"inputs":[],"type":"error","name":"OrderExpired"},{"inputs":[{"internalType":"uint256","name":"deadline","type":"uint256","indexed":false},{"internalType":"struct Input[]","name":"inputs","type":"tuple[]","components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"indexed":false},{"internalType":"struct Output[]","name":"outputs","type":"tuple[]","components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"chainId","type":"uint32"}],"indexed":false}],"type":"event","name":"Order","anonymous":false},{"inputs":[{"internalType":"address","name":"recipient","type":"address","indexed":true},{"internalType":"address","name":"token","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"Sweep","anonymous":false},{"inputs":[{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"struct Input[]","name":"inputs","type":"tuple[]","components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}]},{"internalType":"struct Output[]","name":"outputs","type":"tuple[]","components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"chainId","type":"uint32"}]}],"stateMutability":"payable","type":"function","name":"initiate"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"token","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"sweep"}],"devdoc":{"kind":"dev","methods":{"initiate(uint256,(address,uint256)[],(address,uint256,address,uint32)[])":{"custom:emits":"Order if the transaction mines.","custom:reverts":"OrderExpired if the deadline has passed.","details":"inputs are provided on the rollup; in exchange,      outputs are expected to be received on the target chain(s).Fees paid to the Builders for fulfilling the Orders      can be included within the \"exchange rate\" between inputs and outputs.The Builder claims the inputs from the contract by submitting `sweep` transactions within the same block.The Rollup STF MUST NOT apply `initiate` transactions to the rollup state      UNLESS the outputs are delivered on the target chains within the same block.","params":{"deadline":"- The deadline at or before which the Order must be fulfilled.","inputs":"- The token amounts offered by the swapper in exchange for the outputs.","outputs":"- The token amounts that must be received on their target chain(s) in order for the Order to be executed."}},"sweep(address,address)":{"custom:emits":"Sweep","custom:reverts":"OnlyBuilder if called by non-block builder","details":"Called by the Builder within the same block as users' `initiate` transactions      to claim the `inputs`.Builder MUST call `sweep` atomically with `fill` (claim Inputs atomically with sending Outputs).","params":{"recipient":"- The address to receive the tokens.","token":"- The token to transfer."}}},"version":1},"userdoc":{"kind":"user","methods":{"initiate(uint256,(address,uint256)[],(address,uint256,address,uint32)[])":{"notice":"Request to swap ERC20s."},"sweep(address,address)":{"notice":"Transfer the entire balance of ERC20 tokens to the recipient."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/Orders.sol":"OrderOrigin"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"],"license":"MIT"},"src/Orders.sol":{"keccak256":"0xb7f6cffcd2516d53e86cda1062c91ff8e0916468b02a209c5f36f6da1c2447c8","urls":["bzz-raw://9051a83c7dcc6e84ad356855c4f0b49dc8bc23a2667e3e3399b1c55fab32e180","dweb:/ipfs/QmdifUwAqUPauSrNEq4SMSZXgL4SLYYeixiXjGC5qXD9Fi"],"license":"UNLICENSED"}},"version":1},"id":27}