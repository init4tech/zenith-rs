{
    "abi": [
        {
            "type": "function",
            "name": "fill",
            "inputs": [
                {
                    "name": "outputs",
                    "type": "tuple[]",
                    "internalType": "struct Output[]",
                    "components": [
                        {
                            "name": "token",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "amount",
                            "type": "uint256",
                            "internalType": "uint256"
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "chainId",
                            "type": "uint32",
                            "internalType": "uint32"
                        }
                    ]
                }
            ],
            "outputs": [],
            "stateMutability": "payable"
        },
        {
            "type": "function",
            "name": "initiate",
            "inputs": [
                {
                    "name": "deadline",
                    "type": "uint256",
                    "internalType": "uint256"
                },
                {
                    "name": "inputs",
                    "type": "tuple[]",
                    "internalType": "struct Input[]",
                    "components": [
                        {
                            "name": "token",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "amount",
                            "type": "uint256",
                            "internalType": "uint256"
                        }
                    ]
                },
                {
                    "name": "outputs",
                    "type": "tuple[]",
                    "internalType": "struct Output[]",
                    "components": [
                        {
                            "name": "token",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "amount",
                            "type": "uint256",
                            "internalType": "uint256"
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "chainId",
                            "type": "uint32",
                            "internalType": "uint32"
                        }
                    ]
                }
            ],
            "outputs": [],
            "stateMutability": "payable"
        },
        {
            "type": "function",
            "name": "sweep",
            "inputs": [
                {
                    "name": "recipient",
                    "type": "address",
                    "internalType": "address"
                },
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "event",
            "name": "Filled",
            "inputs": [
                {
                    "name": "outputs",
                    "type": "tuple[]",
                    "indexed": false,
                    "internalType": "struct Output[]",
                    "components": [
                        {
                            "name": "token",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "amount",
                            "type": "uint256",
                            "internalType": "uint256"
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "chainId",
                            "type": "uint32",
                            "internalType": "uint32"
                        }
                    ]
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "Order",
            "inputs": [
                {
                    "name": "deadline",
                    "type": "uint256",
                    "indexed": false,
                    "internalType": "uint256"
                },
                {
                    "name": "inputs",
                    "type": "tuple[]",
                    "indexed": false,
                    "internalType": "struct Input[]",
                    "components": [
                        {
                            "name": "token",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "amount",
                            "type": "uint256",
                            "internalType": "uint256"
                        }
                    ]
                },
                {
                    "name": "outputs",
                    "type": "tuple[]",
                    "indexed": false,
                    "internalType": "struct Output[]",
                    "components": [
                        {
                            "name": "token",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "amount",
                            "type": "uint256",
                            "internalType": "uint256"
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "chainId",
                            "type": "uint32",
                            "internalType": "uint32"
                        }
                    ]
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "Sweep",
            "inputs": [
                {
                    "name": "recipient",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "token",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": false,
                    "internalType": "uint256"
                }
            ],
            "anonymous": false
        },
        {
            "type": "error",
            "name": "OnlyBuilder",
            "inputs": []
        },
        {
            "type": "error",
            "name": "OrderExpired",
            "inputs": []
        }
    ],
    "bytecode": {
        "object": "0x6080604052348015600e575f80fd5b50610a5d8061001c5f395ff3fe608060405260043610610033575f3560e01c8063897bc0d614610037578063b8dc491b1461004c578063f9c504411461006b575b5f80fd5b61004a61004536600461075b565b61007e565b005b348015610057575f80fd5b5061004a610066366004610795565b610285565b61004a6100793660046107c6565b61041e565b345f5b8251811015610249575f6001600160a01b03168382815181106100a6576100a66108b6565b60200260200101515f01516001600160a01b031603610160578281815181106100d1576100d16108b6565b602002602001015160200151826100e891906108ca565b91508281815181106100fc576100fc6108b6565b6020026020010151604001516001600160a01b03166108fc848381518110610126576101266108b6565b60200260200101516020015190811502906040515f60405180830381858888f1935050505015801561015a573d5f803e3d5ffd5b50610241565b828181518110610172576101726108b6565b60200260200101515f01516001600160a01b03166323b872dd3385848151811061019e5761019e6108b6565b6020026020010151604001518685815181106101bc576101bc6108b6565b60209081029190910181015101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303815f875af115801561021b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061023f91906108ef565b505b600101610081565b507f14b3027353aba71f468d178fdede9ac211a25ae484028823bce1e6700e58e624826040516102799190610989565b60405180910390a15050565b3341146102a55760405163357a555d60e01b815260040160405180910390fd5b5f6001600160a01b0382166102f0575060405147906001600160a01b0384169082156108fc029083905f818181858888f193505050501580156102ea573d5f803e3d5ffd5b506103cc565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610332573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610356919061099b565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390529192509083169063a9059cbb906044016020604051808303815f875af11580156103a6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103ca91906108ef565b505b816001600160a01b0316836001600160a01b03167fed679328aebf74ede77ae09efcf36e90244f83643dadac1c2d9f0b21a46f6ab78360405161041191815260200190565b60405180910390a3505050565b8242111561043f576040516362b439dd60e11b815260040160405180910390fd5b61044882610488565b7f80c9b8738a5ff299b770efb55e4372a5fc655294aca7145b3c529c2d89732d6283838360405161047b939291906109b2565b60405180910390a1505050565b345f5b82518110156105c5575f6001600160a01b03168382815181106104b0576104b06108b6565b60200260200101515f01516001600160a01b0316036104f9578281815181106104db576104db6108b6565b602002602001015160200151826104f291906108ca565b91506105bd565b82818151811061050b5761050b6108b6565b60200260200101515f01516001600160a01b03166323b872dd3330868581518110610538576105386108b6565b60209081029190910181015101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303815f875af1158015610597573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105bb91906108ef565b505b60010161048b565b505050565b634e487b7160e01b5f52604160045260245ffd5b6040516080810167ffffffffffffffff81118282101715610601576106016105ca565b60405290565b6040805190810167ffffffffffffffff81118282101715610601576106016105ca565b604051601f8201601f1916810167ffffffffffffffff81118282101715610653576106536105ca565b604052919050565b5f67ffffffffffffffff821115610674576106746105ca565b5060051b60200190565b80356001600160a01b0381168114610694575f80fd5b919050565b5f82601f8301126106a8575f80fd5b81356106bb6106b68261065b565b61062a565b8082825260208201915060208360071b8601019250858311156106dc575f80fd5b602085015b8381101561075157608081880312156106f8575f80fd5b6107006105de565b6107098261067e565b8152602082810135908201526107216040830161067e565b6040820152606082013563ffffffff8116811461073c575f80fd5b606082015283526020909201916080016106e1565b5095945050505050565b5f6020828403121561076b575f80fd5b813567ffffffffffffffff811115610781575f80fd5b61078d84828501610699565b949350505050565b5f80604083850312156107a6575f80fd5b6107af8361067e565b91506107bd6020840161067e565b90509250929050565b5f805f606084860312156107d8575f80fd5b83359250602084013567ffffffffffffffff8111156107f5575f80fd5b8401601f81018613610805575f80fd5b80356108136106b68261065b565b8082825260208201915060208360061b850101925088831115610834575f80fd5b6020840193505b82841015610882576040848a031215610852575f80fd5b61085a610607565b6108638561067e565b815260208581013581830152908352604090940193919091019061083b565b9450505050604084013567ffffffffffffffff8111156108a0575f80fd5b6108ac86828701610699565b9150509250925092565b634e487b7160e01b5f52603260045260245ffd5b818103818111156108e957634e487b7160e01b5f52601160045260245ffd5b92915050565b5f602082840312156108ff575f80fd5b8151801515811461090e575f80fd5b9392505050565b5f8151808452602084019350602083015f5b8281101561097f57815180516001600160a01b039081168852602080830151818a01526040808401519092169189019190915260609182015163ffffffff169188019190915260809096019590910190600101610927565b5093949350505050565b602081525f61090e6020830184610915565b5f602082840312156109ab575f80fd5b5051919050565b5f60608201858352606060208401528085518083526080850191506020870192505f5b81811015610a0857835180516001600160a01b0316845260209081015181850152909301926040909201916001016109d5565b50508381036040850152610a1c8186610915565b97965050505050505056fea2646970667358221220481f12efa44fdc34d5c1574059dacbcab95236bd876bf022654c352386303c5564736f6c634300081a0033",
        "sourceMap": "6506:57:27:-:0;;;;;;;;;;;;;;;;;;;",
        "linkReferences": {}
    },
    "deployedBytecode": {
        "object": "0x608060405260043610610033575f3560e01c8063897bc0d614610037578063b8dc491b1461004c578063f9c504411461006b575b5f80fd5b61004a61004536600461075b565b61007e565b005b348015610057575f80fd5b5061004a610066366004610795565b610285565b61004a6100793660046107c6565b61041e565b345f5b8251811015610249575f6001600160a01b03168382815181106100a6576100a66108b6565b60200260200101515f01516001600160a01b031603610160578281815181106100d1576100d16108b6565b602002602001015160200151826100e891906108ca565b91508281815181106100fc576100fc6108b6565b6020026020010151604001516001600160a01b03166108fc848381518110610126576101266108b6565b60200260200101516020015190811502906040515f60405180830381858888f1935050505015801561015a573d5f803e3d5ffd5b50610241565b828181518110610172576101726108b6565b60200260200101515f01516001600160a01b03166323b872dd3385848151811061019e5761019e6108b6565b6020026020010151604001518685815181106101bc576101bc6108b6565b60209081029190910181015101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303815f875af115801561021b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061023f91906108ef565b505b600101610081565b507f14b3027353aba71f468d178fdede9ac211a25ae484028823bce1e6700e58e624826040516102799190610989565b60405180910390a15050565b3341146102a55760405163357a555d60e01b815260040160405180910390fd5b5f6001600160a01b0382166102f0575060405147906001600160a01b0384169082156108fc029083905f818181858888f193505050501580156102ea573d5f803e3d5ffd5b506103cc565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610332573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610356919061099b565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390529192509083169063a9059cbb906044016020604051808303815f875af11580156103a6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103ca91906108ef565b505b816001600160a01b0316836001600160a01b03167fed679328aebf74ede77ae09efcf36e90244f83643dadac1c2d9f0b21a46f6ab78360405161041191815260200190565b60405180910390a3505050565b8242111561043f576040516362b439dd60e11b815260040160405180910390fd5b61044882610488565b7f80c9b8738a5ff299b770efb55e4372a5fc655294aca7145b3c529c2d89732d6283838360405161047b939291906109b2565b60405180910390a1505050565b345f5b82518110156105c5575f6001600160a01b03168382815181106104b0576104b06108b6565b60200260200101515f01516001600160a01b0316036104f9578281815181106104db576104db6108b6565b602002602001015160200151826104f291906108ca565b91506105bd565b82818151811061050b5761050b6108b6565b60200260200101515f01516001600160a01b03166323b872dd3330868581518110610538576105386108b6565b60209081029190910181015101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303815f875af1158015610597573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105bb91906108ef565b505b60010161048b565b505050565b634e487b7160e01b5f52604160045260245ffd5b6040516080810167ffffffffffffffff81118282101715610601576106016105ca565b60405290565b6040805190810167ffffffffffffffff81118282101715610601576106016105ca565b604051601f8201601f1916810167ffffffffffffffff81118282101715610653576106536105ca565b604052919050565b5f67ffffffffffffffff821115610674576106746105ca565b5060051b60200190565b80356001600160a01b0381168114610694575f80fd5b919050565b5f82601f8301126106a8575f80fd5b81356106bb6106b68261065b565b61062a565b8082825260208201915060208360071b8601019250858311156106dc575f80fd5b602085015b8381101561075157608081880312156106f8575f80fd5b6107006105de565b6107098261067e565b8152602082810135908201526107216040830161067e565b6040820152606082013563ffffffff8116811461073c575f80fd5b606082015283526020909201916080016106e1565b5095945050505050565b5f6020828403121561076b575f80fd5b813567ffffffffffffffff811115610781575f80fd5b61078d84828501610699565b949350505050565b5f80604083850312156107a6575f80fd5b6107af8361067e565b91506107bd6020840161067e565b90509250929050565b5f805f606084860312156107d8575f80fd5b83359250602084013567ffffffffffffffff8111156107f5575f80fd5b8401601f81018613610805575f80fd5b80356108136106b68261065b565b8082825260208201915060208360061b850101925088831115610834575f80fd5b6020840193505b82841015610882576040848a031215610852575f80fd5b61085a610607565b6108638561067e565b815260208581013581830152908352604090940193919091019061083b565b9450505050604084013567ffffffffffffffff8111156108a0575f80fd5b6108ac86828701610699565b9150509250925092565b634e487b7160e01b5f52603260045260245ffd5b818103818111156108e957634e487b7160e01b5f52601160045260245ffd5b92915050565b5f602082840312156108ff575f80fd5b8151801515811461090e575f80fd5b9392505050565b5f8151808452602084019350602083015f5b8281101561097f57815180516001600160a01b039081168852602080830151818a01526040808401519092169189019190915260609182015163ffffffff169188019190915260809096019590910190600101610927565b5093949350505050565b602081525f61090e6020830184610915565b5f602082840312156109ab575f80fd5b5051919050565b5f60608201858352606060208401528085518083526080850191506020870192505f5b81811015610a0857835180516001600160a01b0316845260209081015181850152909301926040909201916001016109d5565b50508381036040850152610a1c8186610915565b97965050505050505056fea2646970667358221220481f12efa44fdc34d5c1574059dacbcab95236bd876bf022654c352386303c5564736f6c634300081a0033",
        "sourceMap": "6506:57:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1814:667;;;;;;:::i;:::-;;:::i;:::-;;5954:504;;;;;;;;;;-1:-1:-1;5954:504:27;;;;;:::i;:::-;;:::i;4446:362::-;;;;;;:::i;:::-;;:::i;1814:667::-;1924:9;1908:13;1943:486;1963:7;:14;1959:1;:18;1943:486;;;2030:1;-1:-1:-1;;;;;2002:30:27;:7;2010:1;2002:10;;;;;;;;:::i;:::-;;;;;;;:16;;;-1:-1:-1;;;;;2002:30:27;;1998:421;;2183:7;2191:1;2183:10;;;;;;;;:::i;:::-;;;;;;;:17;;;2174:26;;;;;:::i;:::-;;;2226:7;2234:1;2226:10;;;;;;;;:::i;:::-;;;;;;;:20;;;-1:-1:-1;;;;;2218:38:27;:57;2257:7;2265:1;2257:10;;;;;;;;:::i;:::-;;;;;;;:17;;;2218:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1998:421;;;2321:7;2329:1;2321:10;;;;;;;;:::i;:::-;;;;;;;:16;;;-1:-1:-1;;;;;2314:37:27;;2352:10;2364:7;2372:1;2364:10;;;;;;;;:::i;:::-;;;;;;;:20;;;2386:7;2394:1;2386:10;;;;;;;;:::i;:::-;;;;;;;;;;;;:17;;2314:90;;-1:-1:-1;;;;;;2314:90:27;;;;;;;-1:-1:-1;;;;;5342:32:34;;;2314:90:27;;;5324:51:34;5411:32;;;;5391:18;;;5384:60;5460:18;;;5453:34;5297:18;;2314:90:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1998:421;1979:3;;1943:486;;;;2459:15;2466:7;2459:15;;;;;;:::i;:::-;;;;;;;;1870:611;1814:667;:::o;5954:504::-;6024:10;6038:14;6024:28;6020:54;;6061:13;;-1:-1:-1;;;6061:13:27;;;;;;;;;;;6020:54;6114:15;-1:-1:-1;;;;;6143:19:27;;6139:266;;-1:-1:-1;6223:36:27;;6188:21;;-1:-1:-1;;;;;6223:27:27;;;:36;;;;;6188:21;;6223:36;;;;6188:21;6223:27;:36;;;;;;;;;;;;;;;;;;;;;6139:266;;;6300:38;;-1:-1:-1;;;6300:38:27;;6332:4;6300:38;;;6951:51:34;-1:-1:-1;;;;;6300:23:27;;;;;6924:18:34;;6300:38:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6352:42;;-1:-1:-1;;;6352:42:27;;-1:-1:-1;;;;;7394:32:34;;;6352:42:27;;;7376:51:34;7443:18;;;7436:34;;;6290:48:27;;-1:-1:-1;6352:22:27;;;;;;7349:18:34;;6352:42:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6139:266;6436:5;-1:-1:-1;;;;;6419:32:27;6425:9;-1:-1:-1;;;;;6419:32:27;;6443:7;6419:32;;;;7627:25:34;;7615:2;7600:18;;7481:177;6419:32:27;;;;;;;;6010:448;5954:504;;:::o;4446:362::-;4628:8;4610:15;:26;4606:53;;;4645:14;;-1:-1:-1;;;4645:14:27;;;;;;;;;;;4606:53;4714:23;4730:6;4714:15;:23::i;:::-;4769:32;4775:8;4785:6;4793:7;4769:32;;;;;;;;:::i;:::-;;;;;;;;4446:362;;;:::o;4923:507::-;5006:9;4990:13;5025:399;5045:6;:13;5041:1;:17;5025:399;;;5110:1;-1:-1:-1;;;;;5083:29:27;:6;5090:1;5083:9;;;;;;;;:::i;:::-;;;;;;;:15;;;-1:-1:-1;;;;;5083:29:27;;5079:335;;5263:6;5270:1;5263:9;;;;;;;;:::i;:::-;;;;;;;:16;;;5254:25;;;;;:::i;:::-;;;5079:335;;;5325:6;5332:1;5325:9;;;;;;;;:::i;:::-;;;;;;;:15;;;-1:-1:-1;;;;;5318:36:27;;5355:10;5375:4;5382:6;5389:1;5382:9;;;;;;;;:::i;:::-;;;;;;;;;;;;:16;;5318:81;;-1:-1:-1;;;;;;5318:81:27;;;;;;;-1:-1:-1;;;;;5342:32:34;;;5318:81:27;;;5324:51:34;5411:32;;;;5391:18;;;5384:60;5460:18;;;5453:34;5297:18;;5318:81:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5079:335;5060:3;;5025:399;;;;4980:450;4923:507;:::o;14:127:34:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:253;218:2;212:9;260:4;248:17;;295:18;280:34;;316:22;;;277:62;274:88;;;342:18;;:::i;:::-;378:2;371:22;146:253;:::o;404:257::-;476:4;470:11;;;508:17;;555:18;540:34;;576:22;;;537:62;534:88;;;602:18;;:::i;666:275::-;737:2;731:9;802:2;783:13;;-1:-1:-1;;779:27:34;767:40;;837:18;822:34;;858:22;;;819:62;816:88;;;884:18;;:::i;:::-;920:2;913:22;666:275;;-1:-1:-1;666:275:34:o;946:189::-;1012:4;1045:18;1037:6;1034:30;1031:56;;;1067:18;;:::i;:::-;-1:-1:-1;1112:1:34;1108:14;1124:4;1104:25;;946:189::o;1140:173::-;1208:20;;-1:-1:-1;;;;;1257:31:34;;1247:42;;1237:70;;1303:1;1300;1293:12;1237:70;1140:173;;;:::o;1318:1197::-;1378:5;1431:3;1424:4;1416:6;1412:17;1408:27;1398:55;;1449:1;1446;1439:12;1398:55;1489:6;1476:20;1516:70;1532:53;1578:6;1532:53;:::i;:::-;1516:70;:::i;:::-;1610:3;1634:6;1629:3;1622:19;1666:4;1661:3;1657:14;1650:21;;1727:4;1717:6;1714:1;1710:14;1702:6;1698:27;1694:38;1680:52;;1755:3;1747:6;1744:15;1741:35;;;1772:1;1769;1762:12;1741:35;1808:4;1800:6;1796:17;1822:662;1838:6;1833:3;1830:15;1822:662;;;1916:4;1910:3;1905;1901:13;1897:24;1894:44;;;1934:1;1931;1924:12;1894:44;1964:22;;:::i;:::-;2013:23;2032:3;2013:23;:::i;:::-;1999:38;;2112:4;2103:14;;;2090:28;2138:16;;;2131:33;2200:32;2228:2;2219:12;;2200:32;:::i;:::-;2195:2;2188:5;2184:14;2177:56;2283:2;2278:3;2274:12;2261:26;2335:10;2326:7;2322:24;2313:7;2310:37;2300:65;;2361:1;2358;2351:12;2300:65;2396:2;2385:14;;2378:31;2422:18;;2469:4;2460:14;;;;1864:4;1855:14;1822:662;;;-1:-1:-1;2502:7:34;1318:1197;-1:-1:-1;;;;;1318:1197:34:o;2520:379::-;2629:6;2682:2;2670:9;2661:7;2657:23;2653:32;2650:52;;;2698:1;2695;2688:12;2650:52;2738:9;2725:23;2771:18;2763:6;2760:30;2757:50;;;2803:1;2800;2793:12;2757:50;2826:67;2885:7;2876:6;2865:9;2861:22;2826:67;:::i;:::-;2816:77;2520:379;-1:-1:-1;;;;2520:379:34:o;2904:260::-;2972:6;2980;3033:2;3021:9;3012:7;3008:23;3004:32;3001:52;;;3049:1;3046;3039:12;3001:52;3072:29;3091:9;3072:29;:::i;:::-;3062:39;;3120:38;3154:2;3143:9;3139:18;3120:38;:::i;:::-;3110:48;;2904:260;;;;;:::o;3169:1586::-;3345:6;3353;3361;3414:2;3402:9;3393:7;3389:23;3385:32;3382:52;;;3430:1;3427;3420:12;3382:52;3475:23;;;-1:-1:-1;3573:2:34;3558:18;;3545:32;3600:18;3589:30;;3586:50;;;3632:1;3629;3622:12;3586:50;3655:22;;3708:4;3700:13;;3696:27;-1:-1:-1;3686:55:34;;3737:1;3734;3727:12;3686:55;3777:2;3764:16;3800:70;3816:53;3862:6;3816:53;:::i;3800:70::-;3892:3;3916:6;3911:3;3904:19;3948:2;3943:3;3939:12;3932:19;;4003:2;3993:6;3990:1;3986:14;3982:2;3978:23;3974:32;3960:46;;4029:7;4021:6;4018:19;4015:39;;;4050:1;4047;4040:12;4015:39;4082:2;4078;4074:11;4063:22;;4094:423;4110:6;4105:3;4102:15;4094:423;;;4192:4;4186:3;4177:7;4173:17;4169:28;4166:48;;;4210:1;4207;4200:12;4166:48;4242:22;;:::i;:::-;4293:23;4312:3;4293:23;:::i;:::-;4277:40;;4392:2;4383:12;;;4370:26;4416:16;;;4409:33;4455:20;;;4136:4;4127:14;;;;4495:12;;;;;4094:423;;;4536:5;-1:-1:-1;;;;4594:4:34;4579:20;;4566:34;4625:18;4612:32;;4609:52;;;4657:1;4654;4647:12;4609:52;4680:69;4741:7;4730:8;4719:9;4715:24;4680:69;:::i;:::-;4670:79;;;3169:1586;;;;;:::o;4760:127::-;4821:10;4816:3;4812:20;4809:1;4802:31;4852:4;4849:1;4842:15;4876:4;4873:1;4866:15;4892:225;4959:9;;;4980:11;;;4977:134;;;5033:10;5028:3;5024:20;5021:1;5014:31;5068:4;5065:1;5058:15;5096:4;5093:1;5086:15;4977:134;4892:225;;;;:::o;5498:277::-;5565:6;5618:2;5606:9;5597:7;5593:23;5589:32;5586:52;;;5634:1;5631;5624:12;5586:52;5666:9;5660:16;5719:5;5712:13;5705:21;5698:5;5695:32;5685:60;;5741:1;5738;5731:12;5685:60;5764:5;5498:277;-1:-1:-1;;;5498:277:34:o;5780:698::-;5839:3;5877:5;5871:12;5904:6;5899:3;5892:19;5936:4;5931:3;5927:14;5920:21;;5975:4;5968:5;5964:16;5998:1;6008:445;6022:6;6019:1;6016:13;6008:445;;;6081:13;;6123:9;;-1:-1:-1;;;;;6119:35:34;;;6107:48;;6205:4;6197:13;;;6191:20;6175:14;;;6168:44;6266:4;6258:13;;;6252:20;6248:46;;;6232:14;;;6225:70;;;;6349:4;6341:13;;;6335:20;6357:10;6331:37;6315:14;;;6308:61;;;;6398:4;6389:14;;;;6426:17;;;;6151:1;6037:9;6008:445;;;-1:-1:-1;6469:3:34;;5780:698;-1:-1:-1;;;;5780:698:34:o;6483:317::-;6712:2;6701:9;6694:21;6675:4;6732:62;6790:2;6779:9;6775:18;6767:6;6732:62;:::i;7013:184::-;7083:6;7136:2;7124:9;7115:7;7111:23;7107:32;7104:52;;;7152:1;7149;7142:12;7104:52;-1:-1:-1;7175:16:34;;7013:184;-1:-1:-1;7013:184:34:o;7663:1074::-;8009:4;8057:2;8046:9;8042:18;8087:6;8076:9;8069:25;8130:2;8125;8114:9;8110:18;8103:30;8153:6;8188;8182:13;8219:6;8211;8204:22;8257:3;8246:9;8242:19;8235:26;;8296:2;8288:6;8284:15;8270:29;;8317:1;8327:282;8341:6;8338:1;8335:13;8327:282;;;8400:13;;8442:9;;-1:-1:-1;;;;;8438:35:34;8426:48;;8522:2;8514:11;;;8508:18;8494:12;;;8487:40;8584:15;;;;8556:4;8547:14;;;;8470:1;8356:9;8327:282;;;8331:3;;8656:9;8651:3;8647:19;8640:4;8629:9;8625:20;8618:49;8684:47;8727:3;8719:6;8684:47;:::i;:::-;8676:55;7663:1074;-1:-1:-1;;;;;;;7663:1074:34:o",
        "linkReferences": {}
    },
    "methodIdentifiers": {
        "fill((address,uint256,address,uint32)[])": "897bc0d6",
        "initiate(uint256,(address,uint256)[],(address,uint256,address,uint32)[])": "f9c50441",
        "sweep(address,address)": "b8dc491b"
    },
    "rawMetadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlyBuilder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct Output[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"name\":\"Filled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Input[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct Output[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sweep\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"}],\"internalType\":\"struct Output[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"name\":\"fill\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Input[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"}],\"internalType\":\"struct Output[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"name\":\"initiate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Filled((address,uint256,address,uint32)[])\":{\"details\":\"NOTE that here, Output.chainId denotes the *origin* chainId.\"},\"Order(uint256,(address,uint256)[],(address,uint256,address,uint32)[])\":{\"details\":\"NOTE that here, Output.chainId denotes the *destination* chainId.\"},\"Sweep(address,address,uint256)\":{\"details\":\"Intended to improve visibility for Builders to ensure Sweep isn't called unexpectedly.      Intentionally does not bother to emit which token(s) were swept, nor their amounts.\"}},\"kind\":\"dev\",\"methods\":{\"fill((address,uint256,address,uint32)[])\":{\"custom:emits\":\"Filled\",\"details\":\"NOTE that here, Output.chainId denotes the *origin* chainId.\",\"params\":{\"outputs\":\"- The Outputs to be transferred.\"}},\"initiate(uint256,(address,uint256)[],(address,uint256,address,uint32)[])\":{\"custom:emits\":\"Order if the transaction mines.\",\"custom:reverts\":\"OrderExpired if the deadline has passed.\",\"details\":\"inputs are provided on the rollup; in exchange,      outputs are expected to be received on the target chain(s).Fees paid to the Builders for fulfilling the Orders      can be included within the \\\"exchange rate\\\" between inputs and outputs.The Builder claims the inputs from the contract by submitting `sweep` transactions within the same block.The Rollup STF MUST NOT apply `initiate` transactions to the rollup state      UNLESS the outputs are delivered on the target chains within the same block.\",\"params\":{\"deadline\":\"- The deadline at or before which the Order must be fulfilled.\",\"inputs\":\"- The token amounts offered by the swapper in exchange for the outputs.\",\"outputs\":\"- The token amounts that must be received on their target chain(s) in order for the Order to be executed.\"}},\"sweep(address,address)\":{\"custom:emits\":\"Sweep\",\"custom:reverts\":\"OnlyBuilder if called by non-block builder\",\"details\":\"Called by the Builder within the same block as users' `initiate` transactions      to claim the `inputs`.Builder MUST call `sweep` atomically with `fill` (claim Inputs atomically with sending Outputs).\",\"params\":{\"recipient\":\"- The address to receive the tokens.\",\"token\":\"- The token to transfer.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"OnlyBuilder()\":[{\"notice\":\"Thrown when trying to call `sweep` if not the Builder of the block.\"}],\"OrderExpired()\":[{\"notice\":\"Thrown when an Order is submitted with a deadline that has passed.\"}]},\"events\":{\"Filled((address,uint256,address,uint32)[])\":{\"notice\":\"Emitted when Order Outputs are sent to their recipients.\"},\"Order(uint256,(address,uint256)[],(address,uint256,address,uint32)[])\":{\"notice\":\"Emitted when an Order is submitted for fulfillment.\"},\"Sweep(address,address,uint256)\":{\"notice\":\"Emitted when tokens or native Ether is swept from the contract.\"}},\"kind\":\"user\",\"methods\":{\"fill((address,uint256,address,uint32)[])\":{\"notice\":\"Send the Output(s) of any number of Orders.         The user calls `initiate` on a rollup; the Builder calls `fill` on the target chain aggregating Outputs.         Builder may aggregate multiple Outputs with the same (`chainId`, `recipient`, `token`) into a single Output with the summed `amount`.\"},\"initiate(uint256,(address,uint256)[],(address,uint256,address,uint32)[])\":{\"notice\":\"Request to swap ERC20s.\"},\"sweep(address,address)\":{\"notice\":\"Transfer the entire balance of ERC20 tokens to the recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Orders.sol\":\"RollupOrders\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009\",\"dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN\"]},\"src/Orders.sol\":{\"keccak256\":\"0xb7f6cffcd2516d53e86cda1062c91ff8e0916468b02a209c5f36f6da1c2447c8\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://9051a83c7dcc6e84ad356855c4f0b49dc8bc23a2667e3e3399b1c55fab32e180\",\"dweb:/ipfs/QmdifUwAqUPauSrNEq4SMSZXgL4SLYYeixiXjGC5qXD9Fi\"]}},\"version\":1}",
    "metadata": {
        "compiler": {
            "version": "0.8.26+commit.8a97fa7a"
        },
        "language": "Solidity",
        "output": {
            "abi": [
                {
                    "inputs": [],
                    "type": "error",
                    "name": "OnlyBuilder"
                },
                {
                    "inputs": [],
                    "type": "error",
                    "name": "OrderExpired"
                },
                {
                    "inputs": [
                        {
                            "internalType": "struct Output[]",
                            "name": "outputs",
                            "type": "tuple[]",
                            "components": [
                                {
                                    "internalType": "address",
                                    "name": "token",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amount",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "address",
                                    "name": "recipient",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint32",
                                    "name": "chainId",
                                    "type": "uint32"
                                }
                            ],
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "Filled",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "deadline",
                            "type": "uint256",
                            "indexed": false
                        },
                        {
                            "internalType": "struct Input[]",
                            "name": "inputs",
                            "type": "tuple[]",
                            "components": [
                                {
                                    "internalType": "address",
                                    "name": "token",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amount",
                                    "type": "uint256"
                                }
                            ],
                            "indexed": false
                        },
                        {
                            "internalType": "struct Output[]",
                            "name": "outputs",
                            "type": "tuple[]",
                            "components": [
                                {
                                    "internalType": "address",
                                    "name": "token",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amount",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "address",
                                    "name": "recipient",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint32",
                                    "name": "chainId",
                                    "type": "uint32"
                                }
                            ],
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "Order",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "recipient",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "address",
                            "name": "token",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "uint256",
                            "name": "amount",
                            "type": "uint256",
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "Sweep",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "struct Output[]",
                            "name": "outputs",
                            "type": "tuple[]",
                            "components": [
                                {
                                    "internalType": "address",
                                    "name": "token",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amount",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "address",
                                    "name": "recipient",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint32",
                                    "name": "chainId",
                                    "type": "uint32"
                                }
                            ]
                        }
                    ],
                    "stateMutability": "payable",
                    "type": "function",
                    "name": "fill"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "deadline",
                            "type": "uint256"
                        },
                        {
                            "internalType": "struct Input[]",
                            "name": "inputs",
                            "type": "tuple[]",
                            "components": [
                                {
                                    "internalType": "address",
                                    "name": "token",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amount",
                                    "type": "uint256"
                                }
                            ]
                        },
                        {
                            "internalType": "struct Output[]",
                            "name": "outputs",
                            "type": "tuple[]",
                            "components": [
                                {
                                    "internalType": "address",
                                    "name": "token",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amount",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "address",
                                    "name": "recipient",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint32",
                                    "name": "chainId",
                                    "type": "uint32"
                                }
                            ]
                        }
                    ],
                    "stateMutability": "payable",
                    "type": "function",
                    "name": "initiate"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "recipient",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "token",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "sweep"
                }
            ],
            "devdoc": {
                "kind": "dev",
                "methods": {
                    "fill((address,uint256,address,uint32)[])": {
                        "custom:emits": "Filled",
                        "details": "NOTE that here, Output.chainId denotes the *origin* chainId.",
                        "params": {
                            "outputs": "- The Outputs to be transferred."
                        }
                    },
                    "initiate(uint256,(address,uint256)[],(address,uint256,address,uint32)[])": {
                        "custom:emits": "Order if the transaction mines.",
                        "custom:reverts": "OrderExpired if the deadline has passed.",
                        "details": "inputs are provided on the rollup; in exchange,      outputs are expected to be received on the target chain(s).Fees paid to the Builders for fulfilling the Orders      can be included within the \"exchange rate\" between inputs and outputs.The Builder claims the inputs from the contract by submitting `sweep` transactions within the same block.The Rollup STF MUST NOT apply `initiate` transactions to the rollup state      UNLESS the outputs are delivered on the target chains within the same block.",
                        "params": {
                            "deadline": "- The deadline at or before which the Order must be fulfilled.",
                            "inputs": "- The token amounts offered by the swapper in exchange for the outputs.",
                            "outputs": "- The token amounts that must be received on their target chain(s) in order for the Order to be executed."
                        }
                    },
                    "sweep(address,address)": {
                        "custom:emits": "Sweep",
                        "custom:reverts": "OnlyBuilder if called by non-block builder",
                        "details": "Called by the Builder within the same block as users' `initiate` transactions      to claim the `inputs`.Builder MUST call `sweep` atomically with `fill` (claim Inputs atomically with sending Outputs).",
                        "params": {
                            "recipient": "- The address to receive the tokens.",
                            "token": "- The token to transfer."
                        }
                    }
                },
                "version": 1
            },
            "userdoc": {
                "kind": "user",
                "methods": {
                    "fill((address,uint256,address,uint32)[])": {
                        "notice": "Send the Output(s) of any number of Orders.         The user calls `initiate` on a rollup; the Builder calls `fill` on the target chain aggregating Outputs.         Builder may aggregate multiple Outputs with the same (`chainId`, `recipient`, `token`) into a single Output with the summed `amount`."
                    },
                    "initiate(uint256,(address,uint256)[],(address,uint256,address,uint32)[])": {
                        "notice": "Request to swap ERC20s."
                    },
                    "sweep(address,address)": {
                        "notice": "Transfer the entire balance of ERC20 tokens to the recipient."
                    }
                },
                "version": 1
            }
        },
        "settings": {
            "remappings": [
                "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
                "ds-test/=lib/forge-std/lib/ds-test/src/",
                "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
                "forge-std/=lib/forge-std/src/",
                "openzeppelin-contracts/=lib/openzeppelin-contracts/"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200
            },
            "metadata": {
                "bytecodeHash": "ipfs"
            },
            "compilationTarget": {
                "src/Orders.sol": "RollupOrders"
            },
            "evmVersion": "cancun",
            "libraries": {}
        },
        "sources": {
            "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
                "keccak256": "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
                "urls": [
                    "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
                    "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
                ],
                "license": "MIT"
            },
            "src/Orders.sol": {
                "keccak256": "0xb7f6cffcd2516d53e86cda1062c91ff8e0916468b02a209c5f36f6da1c2447c8",
                "urls": [
                    "bzz-raw://9051a83c7dcc6e84ad356855c4f0b49dc8bc23a2667e3e3399b1c55fab32e180",
                    "dweb:/ipfs/QmdifUwAqUPauSrNEq4SMSZXgL4SLYYeixiXjGC5qXD9Fi"
                ],
                "license": "UNLICENSED"
            }
        },
        "version": 1
    },
    "id": 27
}